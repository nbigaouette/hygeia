# TODO:
#   * Use a real changelog for the release (see https://github.com/urbica/martin/blob/master/.github/workflows/ci.yml#L198)
#   * Nightly run for cargo audit
#   * Centralize Rust version into a single env variable (possible?)
#   * Possible to centralize OS versions into env variable?
#     https://stackoverflow.com/questions/58981442/how-can-i-centralize-dry-a-string-in-github-actions-config-yaml

on: [push]

name: Build and Test

env:
  RUST_BACKTRACE: 1

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        rust:
          - 1.46.0
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install rustfmt
        run: |
          rustup component add rustfmt
          rustfmt --version
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  check:
    name: Check
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        rust:
          - 1.46.0
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      # - name: Cache (cargo registry)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/registry
      #     key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo index)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/git
      #     key: cargo-index-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo build)
      #   uses: actions/cache@v1
      #   with:
      #     path: target
      #     key: cargo-build-target-Linux-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - linux-musl
          - linux-gnu
          - macos
          - win-gnu
          - win-msvc
        include:
          - build: linux-musl
            os: ubuntu-18.04
            rust: 1.46.0
            target: x86_64-unknown-linux-musl
          - build: linux-gnu
            os: ubuntu-18.04
            rust: 1.46.0
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macOS-latest
            rust: 1.46.0
            target: x86_64-apple-darwin
          - build: win-gnu
            os: windows-2019
            rust: 1.46.0
            target: x86_64-pc-windows-gnu
          - build: win-msvc
            os: windows-2019
            rust: 1.46.0
            target: x86_64-pc-windows-msvc
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Install additional packages (linux-musl)
        if: contains(matrix.target, 'x86_64-unknown-linux-musl')
        run: sudo apt-get install musl-tools
      - name: Copy crt2.o from mingw (windows-gnu)
        if: contains(matrix.target, 'x86_64-pc-windows-gnu')
        # See:
        #   https://github.com/rust-lang/rust/issues/49078
        #   https://github.com/rust-lang/rust/issues/53454
        #   https://www.reddit.com/r/rust/comments/cvyuqk/uptodate_way_to_crosscompile_from_osx_to_windows/
        run: |
          $crt2="C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\crt2.o"
          Copy-Item $crt2 -Destination C:\Rust\.rustup\toolchains\1.46.0-x86_64-pc-windows-msvc\lib\rustlib\x86_64-pc-windows-gnu\lib\crt2.o -Force
      # - name: Cache (cargo registry)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/registry
      #     key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo index)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/git
      #     key: cargo-index-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo build)
      #   uses: actions/cache@v1
      #   with:
      #     path: target
      #     key: cargo-build-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build (cargo build)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all
      - name: Build tests (cargo test)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-run
      - name: Upload hygeia as artifact (Linux)
        uses: actions/upload-artifact@v1
        if: contains(matrix.os, 'ubuntu')
        with:
          name: hygeia-${{ matrix.target }}-${{github.sha}}
          path: target/${{ matrix.target }}/debug/hygeia
      - name: Upload hygeia as artifact (macOS)
        uses: actions/upload-artifact@v1
        if: contains(matrix.os, 'macOS')
        with:
          name: hygeia-${{ matrix.target }}-${{github.sha}}
          path: target/${{ matrix.target }}/debug/hygeia
      - name: Upload hygeia.exe as artifact (Windows)
        uses: actions/upload-artifact@v1
        if: "contains(matrix.os, 'windows')"
        with:
          name: hygeia-${{ matrix.target }}-${{github.sha}}
          path: target/${{ matrix.target }}/debug/hygeia.exe
      - name: Unit Tests (cargo test)
        uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: test unit
      - name: Integration Tests (cargo test integration)
        uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: test integration commands
      # Don't run this in CI since it's way too long (manually stopped after 1h45)
      # - name: Integration Tests (install all Python 3)
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: xtask
      #     args: test integration all-versions

  clippy:
    name: Clippy
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        rust:
          - 1.46.0
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add clippy
      # - name: Cache (cargo registry)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/registry
      #     key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo index)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/git
      #     key: cargo-index-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo build)
      #   uses: actions/cache@v1
      #   with:
      #     path: target
      #     key: cargo-build-target-Linux-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.46.0

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Print Rust versions
        run: |
          rustup --version
          rustc --version
          cargo --version
      - name: Install 'cargo-deny'
        # See https://github.com/embarkstudios/cargo-deny
        run: |
          curl -L "https://github.com/EmbarkStudios/cargo-deny/releases/download/0.7.3/cargo-deny-0.7.3-x86_64-unknown-linux-musl.tar.gz" | tar -zxv
          mv *-x86_64-*/cargo-* ~/.cargo/bin/
          rm -fr *-x86_64-*
          cargo deny --help

      - name: Print licenses
        run: cargo deny list

      - name: Verify security advisories
        run: cargo deny check advisories

  coverage:
    name: Code coverage
    runs-on: ubuntu-18.04
    container:
      image: xd009642/tarpaulin@sha256:ed96e52f1c9e376f640624b2335c03bbec5a332479dc745335712686d3677d3d
      env:
        RUST_BACKTRACE: 1
      volumes:
        - ${GITHUB_WORKSPACE}:/volume
      options: --security-opt seccomp=unconfined
    steps:
      - uses: actions/checkout@v1
      # - name: Cache (cargo registry)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/registry
      #     key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo index)
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/git
      #     key: cargo-index-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache (cargo build)
      #   uses: actions/cache@v1
      #   with:
      #     path: target
      #     key: cargo-build-target-tarpaulin-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tarpaulin
        run: cargo tarpaulin --out Xml --verbose --exclude-files "tests/integration/*" --exclude-files "xtask/*" --exclude-files "hygeia_test_helpers/*" integration_tests -- "tests::"
      - name: Upload coverage to codecov.io
        # run: bash <(curl -s https://codecov.io/bash)
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }} #required
          file: ./cobertura.xml
          # flags: unittests #optional
          # name: codecov-umbrella #optional
          # yml: ./codecov.yml #optional

  # Inspired by:
  #   https://github.com/BurntSushi/ripgrep/blob/8cb7271b647f63420530ac04bc13ed8ea7353690/.github/workflows/ci.yml#L10-L101
  #   https://github.com/actions/create-release/issues/14

  create_release:
    name: Create GitHub release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [fmt, check, test, clippy, coverage]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: true
      - name: Output release URL file
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  release:
    name: Build release binary
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          - musl
          - macos
          - win-gnu
          - win-msvc
        include:
          - build: musl
            os: ubuntu-18.04
            rust: 1.46.0
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macOS-latest
            rust: 1.46.0
            target: x86_64-apple-darwin
          - build: win-gnu
            os: windows-2019
            rust: 1.46.0
            target: x86_64-pc-windows-gnu
          - build: win-msvc
            os: windows-2019
            rust: 1.46.0
            target: x86_64-pc-windows-msvc
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Install Rust Target
        run: rustup target add ${{ matrix.target }}
      - name: Install musl-gcc
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install musl-tools
      - name: Copy crt2.o from mingw (windows-gnu)
        if: contains(matrix.target, 'x86_64-pc-windows-gnu')
        # See:
        #   https://github.com/rust-lang/rust/issues/49078
        #   https://github.com/rust-lang/rust/issues/53454
        #   https://www.reddit.com/r/rust/comments/cvyuqk/uptodate_way_to_crosscompile_from_osx_to_windows/
        run: |
          $crt2="C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\crt2.o"
          Copy-Item $crt2 -Destination C:\Rust\.rustup\toolchains\1.46.0-x86_64-pc-windows-msvc\lib\rustlib\x86_64-pc-windows-gnu\lib\crt2.o -Force
      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Package artifacts
        id: package
        run: |
          cargo xtask package-artifacts --target release --target-triple ${{ matrix.target }}
          echo "::set-output name=git_describe::$(git describe --always --tags --long --dirty=-modified)"

      - name: Get release file name and upload URL
        id: get_release_info
        run: cargo xtask release-url

      - name: Upload assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./hygeia-${{ steps.package.outputs.git_describe }}-${{ matrix.target }}.zip
          asset_name: hygeia-${{ steps.package.outputs.git_describe }}-${{ matrix.target }}.zip
          asset_content_type: application/zip
